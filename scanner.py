import requests

class BasicScanner:
    def __init__(self, url):
        self.url = url.rstrip('/')  # Remove trailing slash for consistency

    def check_sql_injection(self):
        print("Starting SQL Injection Scan...")
        test_payloads = ["'", "' OR '1'='1", "' AND 1=1 --", "' UNION SELECT NULL,NULL --"]
        vulnerable = False

        for payload in test_payloads:
            full_url = f"{self.url}?id={payload}"
            try:
                response = requests.get(full_url, timeout=5)
                if "syntax" in response.text.lower() or "mysql" in response.text.lower():
                    print(f"[!] Possible SQL Injection found at: {full_url}")
                    vulnerable = True
                else:
                    print(f"[-] No SQL Injection found at: {full_url}")
            except requests.RequestException as e:
                print(f"[!] Error accessing {full_url}: {e}")

        if not vulnerable:
            print("No SQL Injection vulnerabilities detected.")
        print("SQL Injection Scan Completed.\n")

    def check_xss(self):
        print("Starting XSS Scan...")
        xss_payload = "<script>alert('XSS');</script>"
        full_url = f"{self.url}?search={xss_payload}"
        vulnerable = False

        try:
            response = requests.get(full_url, timeout=5)
            if xss_payload in response.text:
                print(f"[!] Possible XSS found at: {full_url}")
                vulnerable = True
            else:
                print(f"[-] No XSS found at: {full_url}")
        except requests.RequestException as e:
            print(f"[!] Error accessing {full_url}: {e}")

        if not vulnerable:
            print("No XSS vulnerabilities detected.")
        print("XSS Scan Completed.\n")

    def check_directory_traversal(self):
        print("Starting Directory Traversal Scan...")
        traversal_payloads = ["../", "../../", "../../../", ".../.../.../"]
        vulnerable = False

        for payload in traversal_payloads:
            full_url = f"{self.url}?file={payload}etc/passwd"
            try:
                response = requests.get(full_url, timeout=5)
                if "root:" in response.text:
                    print(f"[!] Possible Directory Traversal found at: {full_url}")
                    vulnerable = True
                else:
                    print(f"[-] No Directory Traversal found at: {full_url}")
            except requests.RequestException as e:
                print(f"[!] Error accessing {full_url}: {e}")

        if not vulnerable:
            print("No Directory Traversal vulnerabilities detected.")
        print("Directory Traversal Scan Completed.\n")

    def check_file_inclusion(self):
        print("Starting File Inclusion Scan...")
        inclusion_payloads = ["../../../../etc/passwd", "../../../../../../windows/win.ini"]
        vulnerable = False

        for payload in inclusion_payloads:
            full_url = f"{self.url}?page={payload}"
            try:
                response = requests.get(full_url, timeout=5)
                if "root:" in response.text or "for 16-bit app support" in response.text:
                    print(f"[!] Possible File Inclusion found at: {full_url}")
                    vulnerable = True
                else:
                    print(f"[-] No File Inclusion found at: {full_url}")
            except requests.RequestException as e:
                print(f"[!] Error accessing {full_url}: {e}")

        if not vulnerable:
            print("No File Inclusion vulnerabilities detected.")
        print("File Inclusion Scan Completed.\n")

    def check_command_injection(self):
        print("Starting Command Injection Scan...")
        injection_payloads = ["; ls", "&& dir", "| whoami"]
        vulnerable = False

        for payload in injection_payloads:
            full_url = f"{self.url}?cmd={payload}"
            try:
                response = requests.get(full_url, timeout=5)
                if "root" in response.text or "administrator" in response.text:
                    print(f"[!] Possible Command Injection found at: {full_url}")
                    vulnerable = True
                else:
                    print(f"[-] No Command Injection found at: {full_url}")
            except requests.RequestException as e:
                print(f"[!] Error accessing {full_url}: {e}")

        if not vulnerable:
            print("No Command Injection vulnerabilities detected.")
        print("Command Injection Scan Completed.\n")

    def check_open_redirect(self):
        print("Starting Open Redirect Scan...")
        redirect_payloads = ["http://evil.com", "//evil.com", "https://malicious-site.com"]
        vulnerable = False

        for payload in redirect_payloads:
            full_url = f"{self.url}?url={payload}"
            try:
                response = requests.get(full_url, timeout=5, allow_redirects=False)
                if response.status_code in [301, 302] and "location" in response.headers:
                    location_header = response.headers["location"]
                    if payload in location_header:
                        print(f"[!] Possible Open Redirect found at: {full_url}")
                        vulnerable = True
                    else:
                        print(f"[-] No Open Redirect found at: {full_url}")
            except requests.RequestException as e:
                print(f"[!] Error accessing {full_url}: {e}")

        if not vulnerable:
            print("No Open Redirect vulnerabilities detected.")
        print("Open Redirect Scan Completed.\n")

    def scan_all(self):
        self.check_sql_injection()
        self.check_xss()
        self.check_directory_traversal()
        self.check_file_inclusion()
        self.check_command_injection()
        self.check_open_redirect()

if __name__ == "__main__":
    # Provide the base URL of the web application you want to test
    target_url = "https://www.edgenexus.io/dvwa/"
    scanner = BasicScanner(target_url)
    scanner.scan_all()
