# scanner.py

import requests

class BasicScanner:
    def __init__(self, url):
        self.url = url.rstrip('/')  # Ensure no trailing slash

    def is_valid_url(self):
        try:
            response = requests.get(self.url, timeout=5)
            return response.status_code == 200
        except requests.RequestException:
            return False

    def check_sql_injection(self):
        results = []
        test_payloads = ["'", "' OR '1'='1", "' AND 1=1 --", "' UNION SELECT NULL,NULL --"]
        vulnerable = False

        for payload in test_payloads:
            full_url = f"{self.url}?id={payload}"
            try:
                response = requests.get(full_url, timeout=5)
                if "syntax" in response.text.lower() or "mysql" in response.text.lower():
                    results.append(f"[!] Possible SQL Injection found at: {full_url}")
                    vulnerable = True
                else:
                    results.append(f"[-] No SQL Injection found at: {full_url}")
            except requests.RequestException as e:
                results.append(f"[!] Error accessing {full_url}: {e}")

        if not vulnerable:
            results.append("No SQL Injection vulnerabilities detected.")
        results.append("SQL Injection Scan Completed.")
        return results

    def check_xss(self):
        results = []
        xss_payload = "<script>alert('XSS');</script>"
        full_url = f"{self.url}?search={xss_payload}"
        vulnerable = False

        try:
            response = requests.get(full_url, timeout=5)
            if xss_payload in response.text:
                results.append(f"[!] Possible XSS found at: {full_url}")
                vulnerable = True
            else:
                results.append(f"[-] No XSS found at: {full_url}")
        except requests.RequestException as e:
            results.append(f"[!] Error accessing {full_url}: {e}")

        if not vulnerable:
            results.append("No XSS vulnerabilities detected.")
        results.append("XSS Scan Completed.")
        return results

    def scan_all(self):
        results = []
        if self.is_valid_url():
            results.append("Valid URL: Starting scans...")
            results.extend(self.check_sql_injection())
            results.extend(self.check_xss())
        else:
            results.append("Invalid URL")
        return results
